"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ControlledInput = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var styles = {
  "ControlledInput": "ControlledInput__ControlledInput___2XK3j",
  "ControlledInput--disabled": "ControlledInput__ControlledInput--disabled___3prPF"
};
var defaultProps = {
  testId: 'cf-ui-controlled-input',
  required: false,
  disabled: false,
  type: 'checkbox',
  willBlurOnEsc: true
};

var ControlledInput =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(ControlledInput, _Component);

  function ControlledInput() {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2.default)(this, ControlledInput);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(ControlledInput)).call.apply(_getPrototypeOf2, [this].concat(args)));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "handleKeyDown", function (e) {
      var ESC = 27;

      if (e.keyCode === ESC && _this.props.willBlurOnEsc) {
        e.currentTarget.blur();
      }
    });
    return _this;
  }

  (0, _createClass2.default)(ControlledInput, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          id = _this$props.id,
          testId = _this$props.testId,
          required = _this$props.required,
          disabled = _this$props.disabled,
          onFocus = _this$props.onFocus,
          onBlur = _this$props.onBlur,
          name = _this$props.name,
          onChange = _this$props.onChange,
          checked = _this$props.checked,
          value = _this$props.value,
          type = _this$props.type,
          labelText = _this$props.labelText,
          willBlurOnEsc = _this$props.willBlurOnEsc,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, ["className", "id", "testId", "required", "disabled", "onFocus", "onBlur", "name", "onChange", "checked", "value", "type", "labelText", "willBlurOnEsc"]);
      var classNames = (0, _classnames.default)(styles['ControlledInput'], className, (0, _defineProperty2.default)({}, styles['ControlledInput--disabled'], disabled));
      return _react.default.createElement("input", (0, _extends2.default)({
        className: classNames,
        value: value,
        name: name,
        checked: this.props.checked,
        type: type,
        "data-test-id": testId,
        onChange: function (_onChange) {
          function onChange(_x) {
            return _onChange.apply(this, arguments);
          }

          onChange.toString = function () {
            return _onChange.toString();
          };

          return onChange;
        }(function (e) {
          if (onChange) {
            onChange(e);
          }
        }),
        onBlur: function (_onBlur) {
          function onBlur(_x2) {
            return _onBlur.apply(this, arguments);
          }

          onBlur.toString = function () {
            return _onBlur.toString();
          };

          return onBlur;
        }(function (e) {
          if (onBlur) {
            onBlur(e);
          }
        }),
        onFocus: function (_onFocus) {
          function onFocus(_x3) {
            return _onFocus.apply(this, arguments);
          }

          onFocus.toString = function () {
            return _onFocus.toString();
          };

          return onFocus;
        }(function (e) {
          if (onFocus) {
            onFocus(e);
          }
        }),
        "aria-label": labelText,
        id: id,
        required: required,
        disabled: disabled,
        onKeyDown: this.handleKeyDown
      }, otherProps));
    }
  }]);
  return ControlledInput;
}(_react.Component);

exports.ControlledInput = ControlledInput;
ControlledInput.displayName = "ControlledInput";
(0, _defineProperty2.default)(ControlledInput, "propTypes", {
  id: _propTypes.default.string,
  required: _propTypes.default.bool,
  labelText: _propTypes.default.string.isRequired,
  checked: _propTypes.default.bool,
  onChange: _propTypes.default.func,
  name: _propTypes.default.string,
  onBlur: _propTypes.default.func,
  onFocus: _propTypes.default.func,
  value: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  type: _propTypes.default.oneOf(['checkbox', 'radio']),
  className: _propTypes.default.string,
  testId: _propTypes.default.string,
  willBlurOnEsc: _propTypes.default.bool.isRequired
});
(0, _defineProperty2.default)(ControlledInput, "defaultProps", defaultProps);
var _default = ControlledInput;
exports.default = _default;
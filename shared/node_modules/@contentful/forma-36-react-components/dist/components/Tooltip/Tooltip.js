"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.Tooltip = void 0;

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _InViewport = _interopRequireDefault(require("../InViewport"));

var styles = {
  "Tooltip__target-wrapper": "Tooltip__Tooltip__target-wrapper___Mtw42",
  "Tooltip": "Tooltip__Tooltip___32xAi",
  "Tooltip--hidden": "Tooltip__Tooltip--hidden___3uqEe",
  "Tooltip--place-bottom": "Tooltip__Tooltip--place-bottom___3qAh6",
  "Tooltip--place-top": "Tooltip__Tooltip--place-top___1_DNW",
  "Tooltip--place-left": "Tooltip__Tooltip--place-left___1_Rl2",
  "Tooltip--place-right": "Tooltip__Tooltip--place-right___H8LiN"
};

var TooltipContainer = function TooltipContainer(props) {
  var children = props.children,
      setRef = props.setRef,
      containerElement = props.containerElement,
      targetWrapperClassName = props.targetWrapperClassName,
      otherProps = (0, _objectWithoutProperties2.default)(props, ["children", "setRef", "containerElement", "targetWrapperClassName"]);
  var ContainerElement = containerElement;
  return _react.default.createElement(ContainerElement, (0, _extends2.default)({
    ref: function ref(_ref) {
      return setRef(_ref);
    },
    className: (0, _classnames.default)(styles['Tooltip__target-wrapper'], targetWrapperClassName)
  }, otherProps), children);
};

TooltipContainer.displayName = "TooltipContainer";
TooltipContainer.propTypes = {
  children: _propTypes.default.node.isRequired,
  setRef: _propTypes.default.any.isRequired,
  containerElement: _propTypes.default.any.isRequired,
  targetWrapperClassName: _propTypes.default.string,
  onMouseLeave: _propTypes.default.any.isRequired,
  onMouseOver: _propTypes.default.any.isRequired,
  onFocus: _propTypes.default.any.isRequired,
  onBlur: _propTypes.default.any.isRequired
};
var defaultProps = {
  containerElement: 'span',
  isVisible: false,
  testId: 'cf-ui-tooltip',
  place: 'top',
  maxWidth: 360
};

var Tooltip =
/*#__PURE__*/
function (_Component) {
  (0, _inherits2.default)(Tooltip, _Component);

  function Tooltip(props) {
    var _this;

    (0, _classCallCheck2.default)(this, Tooltip);
    _this = (0, _possibleConstructorReturn2.default)(this, (0, _getPrototypeOf2.default)(Tooltip).call(this, props));
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "portalTarget", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "place", 'top');
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "containerDomNode", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "tooltipDomNode", null);
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "state", {
      isVisible: _this.props.isVisible
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "setPlace", function (place) {
      if (_this.state.isVisible) {
        _this.place = place;

        _this.forceUpdate();
      }
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "calculatePosition", function () {
      if (!_this.containerDomNode || !_this.tooltipDomNode) {
        return {
          top: null,
          left: null
        };
      }

      var calculatedPosition = {};

      var containerRect = _this.containerDomNode.getBoundingClientRect();

      var tooltipRect = _this.tooltipDomNode.getBoundingClientRect();

      var carretVerticalOffset = 20;
      var carretHorizontalOffset = 12;

      switch (_this.place) {
        case 'top':
          calculatedPosition = {
            left: containerRect.left + (containerRect.width / 2 - tooltipRect.width / 2),
            top: containerRect.top - (tooltipRect.height + carretVerticalOffset)
          };
          break;

        case 'bottom':
          calculatedPosition = {
            left: containerRect.left + (containerRect.width / 2 - tooltipRect.width / 2),
            top: containerRect.top + containerRect.height
          };
          break;

        case 'left':
          calculatedPosition = {
            left: containerRect.left - (tooltipRect.width + carretHorizontalOffset),
            top: containerRect.top + containerRect.height / 2 - tooltipRect.height / 2 - 10 // Tooltip margin

          };
          break;

        case 'right':
          calculatedPosition = {
            left: containerRect.left + (containerRect.width + carretHorizontalOffset),
            top: containerRect.top + containerRect.height / 2 - tooltipRect.height / 2 - 10 // Tooltip margin

          };
          break;

        default:
          calculatedPosition = {};
      }

      return calculatedPosition;
    });
    (0, _defineProperty2.default)((0, _assertThisInitialized2.default)(_this), "renderTooltip", function (content) {
      if (!_this.portalTarget) {
        return null;
      }

      var placeClass = "Tooltip--place-".concat(_this.place);
      var classNames = (0, _classnames.default)(styles['Tooltip'], styles[placeClass], _this.props.className, (0, _defineProperty2.default)({}, styles['Tooltip--hidden'], !_this.state.isVisible));

      var tooltip = _react.default.createElement("div", {
        role: "tooltip",
        id: _this.props.id,
        "aria-hidden": _this.state.isVisible ? 'false' : 'true',
        style: (0, _objectSpread2.default)({}, _this.calculatePosition(), {
          maxWidth: _this.props.maxWidth
        }),
        ref: function ref(_ref2) {
          _this.tooltipDomNode = _ref2;
        },
        contentEditable: false,
        onFocus: function onFocus() {
          _this.setState({
            isVisible: false
          });
        },
        onMouseOver: function onMouseOver() {
          _this.setState({
            isVisible: false
          });
        },
        className: classNames,
        "data-test-id": _this.props.testId
      }, _react.default.createElement(_InViewport.default, {
        onOverflowTop: function onOverflowTop() {
          return _this.setPlace('bottom');
        },
        onOverflowLeft: function onOverflowLeft() {
          return _this.setPlace('right');
        },
        onOverflowBottom: function onOverflowBottom() {
          return _this.setPlace('top');
        },
        onOverflowRight: function onOverflowRight() {
          return _this.setPlace('left');
        }
      }, content));

      return _reactDom.default.createPortal(tooltip, _this.portalTarget);
    });
    _this.place = props.place;
    return _this;
  }

  (0, _createClass2.default)(Tooltip, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      if (typeof window !== "undefined") {
        this.portalTarget = window.document.createElement('div');
        window.document.body.appendChild(this.portalTarget);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.isVisible) {
        this.setState({
          isVisible: true
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.content !== this.props.content) {
        this.forceUpdate();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.portalTarget) {
        window.document.body.removeChild(this.portalTarget);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          targetWrapperClassName = _this$props.targetWrapperClassName,
          content = _this$props.content,
          onMouseLeave = _this$props.onMouseLeave,
          onMouseOver = _this$props.onMouseOver,
          onFocus = _this$props.onFocus,
          containerElement = _this$props.containerElement,
          onBlur = _this$props.onBlur,
          children = _this$props.children,
          place = _this$props.place,
          isVisible = _this$props.isVisible,
          testId = _this$props.testId,
          maxWidth = _this$props.maxWidth,
          otherProps = (0, _objectWithoutProperties2.default)(_this$props, ["className", "targetWrapperClassName", "content", "onMouseLeave", "onMouseOver", "onFocus", "containerElement", "onBlur", "children", "place", "isVisible", "testId", "maxWidth"]);
      return _react.default.createElement(TooltipContainer, (0, _extends2.default)({
        containerElement: containerElement,
        onMouseOver: function (_onMouseOver) {
          function onMouseOver(_x) {
            return _onMouseOver.apply(this, arguments);
          }

          onMouseOver.toString = function () {
            return _onMouseOver.toString();
          };

          return onMouseOver;
        }(function (e) {
          _this2.setState({
            isVisible: true
          });

          if (onMouseOver) {
            onMouseOver(e);
          }
        }),
        onMouseLeave: function (_onMouseLeave) {
          function onMouseLeave(_x2) {
            return _onMouseLeave.apply(this, arguments);
          }

          onMouseLeave.toString = function () {
            return _onMouseLeave.toString();
          };

          return onMouseLeave;
        }(function (e) {
          _this2.setState({
            isVisible: false
          });

          if (onMouseLeave) {
            onMouseLeave(e);
          }
        }),
        onFocus: function (_onFocus) {
          function onFocus(_x3) {
            return _onFocus.apply(this, arguments);
          }

          onFocus.toString = function () {
            return _onFocus.toString();
          };

          return onFocus;
        }(function (e) {
          _this2.setState({
            isVisible: true
          });

          if (onFocus) {
            onFocus(e);
          }
        }),
        onBlur: function (_onBlur) {
          function onBlur(_x4) {
            return _onBlur.apply(this, arguments);
          }

          onBlur.toString = function () {
            return _onBlur.toString();
          };

          return onBlur;
        }(function (e) {
          _this2.setState({
            isVisible: false
          });

          if (onBlur) {
            onBlur(e);
          }
        }),
        setRef: function setRef(ref) {
          _this2.containerDomNode = ref;
        },
        targetWrapperClassName: targetWrapperClassName,
        "aria-describedby": this.props.id
      }, otherProps), _react.default.createElement(_react.default.Fragment, null, children, content && this.renderTooltip(content)));
    }
  }]);
  return Tooltip;
}(_react.Component);

exports.Tooltip = Tooltip;
Tooltip.displayName = "Tooltip";
(0, _defineProperty2.default)(Tooltip, "propTypes", {
  children: _propTypes.default.node.isRequired,
  containerElement: _propTypes.default.node,
  place: _propTypes.default.oneOf(['top', 'bottom', 'right', 'left']),
  isVisible: _propTypes.default.bool,
  maxWidth: _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]),
  testId: _propTypes.default.string,
  id: _propTypes.default.string,
  className: _propTypes.default.string,
  content: _propTypes.default.node,
  targetWrapperClassName: _propTypes.default.string,
  onMouseOver: _propTypes.default.any,
  onMouseLeave: _propTypes.default.any,
  onFocus: _propTypes.default.any,
  onBlur: _propTypes.default.any
});
(0, _defineProperty2.default)(Tooltip, "defaultProps", defaultProps);
var _default = Tooltip;
exports.default = _default;
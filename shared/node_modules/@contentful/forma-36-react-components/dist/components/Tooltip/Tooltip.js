"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Tooltip = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactDom = _interopRequireDefault(require("react-dom"));

var _classnames = _interopRequireDefault(require("classnames"));

var _InViewport = _interopRequireDefault(require("../InViewport"));

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var styles = {
  "Tooltip__target-wrapper": "Tooltip__Tooltip__target-wrapper___Mtw42",
  "Tooltip": "Tooltip__Tooltip___32xAi",
  "Tooltip--hidden": "Tooltip__Tooltip--hidden___3uqEe",
  "Tooltip--place-bottom": "Tooltip__Tooltip--place-bottom___3qAh6",
  "Tooltip--place-top": "Tooltip__Tooltip--place-top___1_DNW",
  "Tooltip--place-left": "Tooltip__Tooltip--place-left___1_Rl2",
  "Tooltip--place-right": "Tooltip__Tooltip--place-right___H8LiN"
};

var TooltipContainer = function TooltipContainer(props) {
  var children = props.children,
      setRef = props.setRef,
      containerElement = props.containerElement,
      targetWrapperClassName = props.targetWrapperClassName,
      otherProps = (0, _objectWithoutProperties2["default"])(props, ["children", "setRef", "containerElement", "targetWrapperClassName"]);
  var ContainerElement = containerElement;
  return /*#__PURE__*/_react["default"].createElement(ContainerElement, (0, _extends2["default"])({
    ref: setRef,
    className: (0, _classnames["default"])(styles['Tooltip__target-wrapper'], targetWrapperClassName)
  }, otherProps), children);
};

TooltipContainer.displayName = "TooltipContainer";
TooltipContainer.propTypes = {
  children: _propTypes["default"].node.isRequired,
  setRef: _propTypes["default"].any.isRequired,
  containerElement: _propTypes["default"].any.isRequired,
  targetWrapperClassName: _propTypes["default"].string,
  onMouseLeave: _propTypes["default"].any.isRequired,
  onMouseOver: _propTypes["default"].any.isRequired,
  onFocus: _propTypes["default"].any.isRequired,
  onBlur: _propTypes["default"].any.isRequired
};
var defaultProps = {
  containerElement: 'span',
  isVisible: false,
  testId: 'cf-ui-tooltip',
  place: 'top',
  maxWidth: 360
};

var TooltipWrapper = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(TooltipWrapper, _Component);

  var _super = _createSuper(TooltipWrapper);

  function TooltipWrapper() {
    var _this;

    (0, _classCallCheck2["default"])(this, TooltipWrapper);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "tooltipDomNode", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "containerDomNode", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      calculatedPosition: {
        top: undefined,
        left: undefined
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "calculatePosition", function () {
      var _this$props = _this.props,
          containerDomNode = _this$props.containerDomNode,
          place = _this$props.place;

      if (!containerDomNode || !_this.tooltipDomNode) {
        return {
          top: undefined,
          left: undefined
        };
      }

      var calculatedPosition = {};
      var containerRect = containerDomNode.getBoundingClientRect();

      var tooltipRect = _this.tooltipDomNode.getBoundingClientRect();

      var carretVerticalOffset = 20;
      var carretHorizontalOffset = 12;

      switch (place) {
        case 'top':
          calculatedPosition = {
            left: containerRect.left + (containerRect.width / 2 - tooltipRect.width / 2),
            top: containerRect.top - (tooltipRect.height + carretVerticalOffset)
          };
          break;

        case 'bottom':
          calculatedPosition = {
            left: containerRect.left + (containerRect.width / 2 - tooltipRect.width / 2),
            top: containerRect.top + containerRect.height
          };
          break;

        case 'left':
          calculatedPosition = {
            left: containerRect.left - (tooltipRect.width + carretHorizontalOffset),
            top: containerRect.top + containerRect.height / 2 - tooltipRect.height / 2 - 10 // Tooltip margin

          };
          break;

        case 'right':
          calculatedPosition = {
            left: containerRect.left + (containerRect.width + carretHorizontalOffset),
            top: containerRect.top + containerRect.height / 2 - tooltipRect.height / 2 - 10 // Tooltip margin

          };
          break;

        default:
          calculatedPosition = {};
      }

      return calculatedPosition;
    });
    return _this;
  }

  (0, _createClass2["default"])(TooltipWrapper, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.setState({
        calculatedPosition: this.calculatePosition()
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props2 = this.props,
          isVisible = _this$props2.isVisible,
          id = _this$props2.id,
          maxWidth = _this$props2.maxWidth,
          className = _this$props2.className,
          testId = _this$props2.testId,
          setPlace = _this$props2.setPlace,
          children = _this$props2.children;
      return /*#__PURE__*/_react["default"].createElement("div", {
        role: "tooltip",
        id: id,
        "aria-hidden": isVisible ? 'false' : 'true',
        style: _objectSpread({}, this.state.calculatedPosition, {
          maxWidth: maxWidth
        }),
        ref: function ref(_ref) {
          _this2.tooltipDomNode = _ref;
        },
        contentEditable: false,
        onFocus: function onFocus() {
          _this2.setState({
            isVisible: false
          });
        },
        onMouseOver: function onMouseOver() {
          _this2.setState({
            isVisible: false
          });
        },
        className: className,
        "data-test-id": testId
      }, /*#__PURE__*/_react["default"].createElement(_InViewport["default"], {
        onOverflowTop: function onOverflowTop() {
          return setPlace('bottom');
        },
        onOverflowLeft: function onOverflowLeft() {
          return setPlace('right');
        },
        onOverflowBottom: function onOverflowBottom() {
          return setPlace('top');
        },
        onOverflowRight: function onOverflowRight() {
          return setPlace('left');
        }
      }, children));
    }
  }]);
  return TooltipWrapper;
}(_react.Component);

TooltipWrapper.displayName = "TooltipWrapper";
(0, _defineProperty2["default"])(TooltipWrapper, "propTypes", {
  children: _propTypes["default"].node.isRequired,
  containerDomNode: _propTypes["default"].any,
  place: _propTypes["default"].oneOf(['top', 'bottom', 'right', 'left']),
  isVisible: _propTypes["default"].bool,
  id: _propTypes["default"].string,
  maxWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  className: _propTypes["default"].string,
  testId: _propTypes["default"].string,
  setPlace: _propTypes["default"].any.isRequired
});

var Tooltip = /*#__PURE__*/function (_Component2) {
  (0, _inherits2["default"])(Tooltip, _Component2);

  var _super2 = _createSuper(Tooltip);

  function Tooltip(props) {
    var _this3;

    (0, _classCallCheck2["default"])(this, Tooltip);
    _this3 = _super2.call(this, props);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "portalTarget", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "place", 'top');
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "containerDomNode", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "tooltipDomNode", void 0);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "state", {
      isVisible: _this3.props.isVisible
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "setPlace", function (place) {
      if (_this3.state.isVisible) {
        _this3.place = place;

        _this3.forceUpdate();
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this3), "renderTooltip", function (content) {
      if (!_this3.portalTarget) {
        return null;
      }

      var placeClass = "Tooltip--place-".concat(_this3.place);
      var classNames = (0, _classnames["default"])(styles['Tooltip'], styles[placeClass], _this3.props.className, (0, _defineProperty2["default"])({}, styles['Tooltip--hidden'], !_this3.state.isVisible));
      return _reactDom["default"].createPortal( /*#__PURE__*/_react["default"].createElement(TooltipWrapper, {
        containerDomNode: _this3.containerDomNode,
        place: _this3.place,
        isVisible: _this3.state.isVisible,
        id: _this3.props.id,
        maxWidth: _this3.props.maxWidth,
        className: classNames,
        testId: _this3.props.testId,
        setPlace: _this3.setPlace
      }, content), _this3.portalTarget);
    });
    _this3.place = props.place;
    return _this3;
  }

  (0, _createClass2["default"])(Tooltip, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      if (typeof window !== "undefined") {
        this.portalTarget = window.document.createElement('div');
        window.document.body.appendChild(this.portalTarget);
      }
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.props.isVisible) {
        this.setState({
          isVisible: true
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.content !== this.props.content) {
        this.forceUpdate();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this.portalTarget) {
        window.document.body.removeChild(this.portalTarget);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this4 = this;

      var _this$props3 = this.props,
          className = _this$props3.className,
          targetWrapperClassName = _this$props3.targetWrapperClassName,
          content = _this$props3.content,
          _onMouseLeave = _this$props3.onMouseLeave,
          _onMouseOver = _this$props3.onMouseOver,
          _onFocus = _this$props3.onFocus,
          containerElement = _this$props3.containerElement,
          _onBlur = _this$props3.onBlur,
          children = _this$props3.children,
          place = _this$props3.place,
          isVisible = _this$props3.isVisible,
          testId = _this$props3.testId,
          maxWidth = _this$props3.maxWidth,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props3, ["className", "targetWrapperClassName", "content", "onMouseLeave", "onMouseOver", "onFocus", "containerElement", "onBlur", "children", "place", "isVisible", "testId", "maxWidth"]);
      return /*#__PURE__*/_react["default"].createElement(TooltipContainer, (0, _extends2["default"])({
        containerElement: containerElement,
        onMouseOver: function onMouseOver(e) {
          _this4.setState({
            isVisible: true
          });

          if (_onMouseOver) {
            _onMouseOver(e);
          }
        },
        onMouseLeave: function onMouseLeave(e) {
          _this4.setState({
            isVisible: false
          });

          if (_onMouseLeave) {
            _onMouseLeave(e);
          }
        },
        onFocus: function onFocus(e) {
          _this4.setState({
            isVisible: true
          });

          if (_onFocus) {
            _onFocus(e);
          }
        },
        onBlur: function onBlur(e) {
          _this4.setState({
            isVisible: false
          });

          if (_onBlur) {
            _onBlur(e);
          }
        },
        setRef: function setRef(ref) {
          _this4.containerDomNode = ref;
        },
        targetWrapperClassName: targetWrapperClassName,
        "aria-describedby": this.props.id
      }, otherProps), /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, children, content && this.state.isVisible && this.renderTooltip(content)));
    }
  }]);
  return Tooltip;
}(_react.Component);

exports.Tooltip = Tooltip;
Tooltip.displayName = "Tooltip";
(0, _defineProperty2["default"])(Tooltip, "propTypes", {
  children: _propTypes["default"].node.isRequired,
  containerElement: _propTypes["default"].node,
  place: _propTypes["default"].oneOf(['top', 'bottom', 'right', 'left']),
  isVisible: _propTypes["default"].bool,
  maxWidth: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].string]),
  testId: _propTypes["default"].string,
  id: _propTypes["default"].string,
  className: _propTypes["default"].string,
  content: _propTypes["default"].node,
  targetWrapperClassName: _propTypes["default"].string,
  onMouseOver: _propTypes["default"].any,
  onMouseLeave: _propTypes["default"].any,
  onFocus: _propTypes["default"].any,
  onBlur: _propTypes["default"].any
});
(0, _defineProperty2["default"])(Tooltip, "defaultProps", defaultProps);
var _default = Tooltip;
exports["default"] = _default;
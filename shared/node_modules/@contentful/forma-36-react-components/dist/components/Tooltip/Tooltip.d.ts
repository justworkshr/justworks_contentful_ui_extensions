import React, { Component } from 'react';
export declare type TooltipPlace = 'top' | 'bottom' | 'right' | 'left';
export declare type TooltipProps = {
    children: React.ReactNode;
    containerElement?: React.ReactNode;
    place?: TooltipPlace;
    isVisible?: boolean;
    maxWidth?: number | string;
    testId?: string;
    id?: string;
    className?: string;
    content?: React.ReactNode;
    targetWrapperClassName?: string;
    onMouseOver?: Function;
    onMouseLeave?: Function;
    onFocus?: Function;
    onBlur?: Function;
} & typeof defaultProps;
interface TooltipState {
    isVisible?: boolean;
}
declare const defaultProps: {
    containerElement: string;
    isVisible: boolean;
    testId: string;
    place: string;
    maxWidth: number;
};
export declare class Tooltip extends Component<TooltipProps, TooltipState> {
    static defaultProps: {
        containerElement: string;
        isVisible: boolean;
        testId: string;
        place: string;
        maxWidth: number;
    };
    portalTarget: HTMLDivElement | null;
    place: TooltipPlace;
    containerDomNode?: HTMLSpanElement;
    tooltipDomNode?: HTMLDivElement;
    state: Partial<TooltipState>;
    constructor(props: TooltipProps);
    componentWillMount(): void;
    componentDidMount(): void;
    componentDidUpdate(prevProps: TooltipProps): void;
    componentWillUnmount(): void;
    setPlace: (place: TooltipPlace) => void;
    renderTooltip: (content: React.ReactNode) => React.ReactPortal | null;
    render(): JSX.Element;
}
export default Tooltip;

import React, { Component, ChangeEventHandler, FocusEventHandler } from 'react';
import { FormLabelProps } from '../FormLabel/FormLabel';
import { TextInputProps } from '../TextInput/TextInput';
import { TextLinkProps } from '../TextLink/TextLink';
import { TextareaProps } from '../Textarea/Textarea';
export declare type TextFieldProps = {
    name: string;
    id: string;
    labelText: string;
    value?: string;
    validationMessage?: string;
    testId?: string;
    className?: string;
    formLabelProps?: Partial<FormLabelProps>;
    textLinkProps?: Partial<TextLinkProps>;
    textInputProps?: Partial<TextInputProps> | Partial<TextareaProps>;
    helpText?: string;
    required?: boolean;
    textarea?: boolean;
    countCharacters?: boolean;
    onChange?: ChangeEventHandler;
    onBlur?: FocusEventHandler;
    onFocus?: FocusEventHandler;
} & typeof defaultProps;
export interface TextFieldState {
    value?: string;
    initialValue?: string;
}
declare const defaultProps: {
    testId: string;
    textarea: boolean;
    required: boolean;
    countCharacters: boolean;
};
export declare class TextField extends Component<TextFieldProps, TextFieldState> {
    static defaultProps: {
        testId: string;
        textarea: boolean;
        required: boolean;
        countCharacters: boolean;
    };
    state: {
        value: string;
        initialValue: string | undefined;
    };
    handleOnChange: (evt: React.ChangeEvent<Element>) => void;
    static getDerivedStateFromProps(props: TextFieldProps, state: TextFieldState): TextFieldState;
    render(): JSX.Element;
}
export default TextField;

import React, { Component } from 'react';
import { positionType, AnchorDimensionsAndPositonType } from '../Dropdown/Dropdown';
export declare type DropdownContainerProps = {
    onClose?: Function;
    dropdownAnchor?: HTMLElement | null;
    className?: string;
    children?: React.ReactNode;
    testId?: string;
    openSubmenu?: (value: boolean) => void;
    anchorDimensionsAndPositon?: AnchorDimensionsAndPositonType;
    position: positionType;
    getRef?: (ref: HTMLElement | null) => void;
    submenu?: boolean;
    width?: number;
    isAutoalignmentEnabled?: boolean;
} & typeof defaultProps;
export interface DropdownState {
    dropdownDimensions: {
        width: number;
        height: number;
    };
    position: positionType;
}
declare const defaultProps: {
    testId: string;
    position: string;
    submenu: boolean;
    isAutoalignmentEnabled: boolean;
    getRef: () => void;
};
declare class DropdownContainer extends Component<DropdownContainerProps, DropdownState> {
    static defaultProps: {
        testId: string;
        position: string;
        submenu: boolean;
        isAutoalignmentEnabled: boolean;
        getRef: () => void;
    };
    portalTarget: HTMLDivElement;
    dropdown: HTMLElement | null;
    lastOverflowAt: string | null;
    state: {
        position: positionType;
        dropdownDimensions: {
            width: number;
            height: number;
        };
    };
    componentDidMount(): void;
    componentWillUnmount(): void;
    trackOutsideClick: (e: MouseEvent) => void;
    handleOverflow: (overflowAt: string) => void;
    calculatePosition: () => false | {
        top: number;
        left: number;
        bottom?: undefined;
    } | {
        bottom: number;
        left: number;
        top?: undefined;
    } | undefined;
    getSubmenuClassNames: () => string;
    render(): JSX.Element;
}
export default DropdownContainer;

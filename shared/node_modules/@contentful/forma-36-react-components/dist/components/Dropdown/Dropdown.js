"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.Dropdown = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DropdownListItem = _interopRequireDefault(require("./DropdownListItem/DropdownListItem"));

var _DropdownContainer = _interopRequireDefault(require("./DropdownContainer"));

var _isBrowser = _interopRequireDefault(require("../../utils/isBrowser"));

function _createSuper(Derived) { return function () { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var styles = {
  "Dropdown": "Dropdown__Dropdown___nAsJ-"
};
var defaultProps = {
  testId: 'cf-ui-dropdown',
  position: 'bottom-left',
  isOpen: false,
  isAutoalignmentEnabled: true,
  getContainerRef: function getContainerRef() {}
};

var Dropdown = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Dropdown, _Component);

  var _super = _createSuper(Dropdown);

  function Dropdown() {
    var _this;

    (0, _classCallCheck2["default"])(this, Dropdown);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "toggleElementWrapper", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "state", {
      isOpen: _this.props.isOpen,
      position: _this.props.position,
      anchorDimensionsAndPositon: {
        top: 0,
        left: 0,
        height: 0,
        width: 0
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "dropdownAnchor", null);
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "setAnchorDimensions", function () {
      if (_this.dropdownAnchor) {
        var dropdownAnchorRect = _this.dropdownAnchor.getBoundingClientRect();

        _this.setState({
          anchorDimensionsAndPositon: {
            top: dropdownAnchorRect.top,
            left: dropdownAnchorRect.left,
            width: dropdownAnchorRect.width,
            height: dropdownAnchorRect.height
          }
        });
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "bindEventListeners", function () {
      if (_this.state.isOpen) {
        document.addEventListener('keydown', _this.handleEscapeKey, true);
        window.addEventListener('resize', _this.setAnchorDimensions, true);
        document.addEventListener('scroll', _this.setAnchorDimensions, true);
      } else {
        document.removeEventListener('keydown', _this.handleEscapeKey, true);
        window.removeEventListener('resize', _this.setAnchorDimensions, true);
        document.removeEventListener('scroll', _this.setAnchorDimensions, true);
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "openMenu", function (isOpen) {
      _this.setState({
        isOpen: isOpen
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleEscapeKey", function (event) {
      var ESCAPE_KEYCODE = 27;

      if (event.keyCode === ESCAPE_KEYCODE) {
        event.stopPropagation();

        _this.setState({
          isOpen: false
        });

        if (_this.props.onClose) {
          _this.props.onClose();
        }
      }
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "openSubmenu", function (isOpen) {
      if (_this.props.submenuToggleLabel) {
        _this.openMenu(isOpen);
      }
    });
    return _this;
  }

  (0, _createClass2["default"])(Dropdown, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (!_isBrowser["default"]) {
        return;
      }

      this.setAnchorDimensions();
      this.bindEventListeners();
    }
  }, {
    key: "UNSAFE_componentWillReceiveProps",
    value: function UNSAFE_componentWillReceiveProps(newProps) {
      this.setState({
        isOpen: newProps.isOpen
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (!_isBrowser["default"]) {
        return;
      }

      if (prevProps.isOpen !== this.props.isOpen) {
        this.setAnchorDimensions();
      }

      this.bindEventListeners();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (!_isBrowser["default"]) {
        return;
      }

      document.removeEventListener('keydown', this.handleEscapeKey, true);
      window.removeEventListener('resize', this.setAnchorDimensions, true);
      document.removeEventListener('scroll', this.setAnchorDimensions, true);
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          className = _this$props.className,
          toggleElement = _this$props.toggleElement,
          testId = _this$props.testId,
          submenuToggleLabel = _this$props.submenuToggleLabel,
          getContainerRef = _this$props.getContainerRef,
          dropdownContainerClassName = _this$props.dropdownContainerClassName,
          children = _this$props.children,
          isOpen = _this$props.isOpen,
          isAutoalignmentEnabled = _this$props.isAutoalignmentEnabled,
          isFullWidth = _this$props.isFullWidth,
          otherProps = (0, _objectWithoutProperties2["default"])(_this$props, ["className", "toggleElement", "testId", "submenuToggleLabel", "getContainerRef", "dropdownContainerClassName", "children", "isOpen", "isAutoalignmentEnabled", "isFullWidth"]);
      var classNames = (0, _classnames["default"])(styles['Dropdown'], className);
      var width = isFullWidth && this.state.anchorDimensionsAndPositon.width;
      var containerTestId = testId ? "".concat(testId, "-container") : testId;
      return submenuToggleLabel ? /*#__PURE__*/_react["default"].createElement(_DropdownListItem["default"], (0, _extends2["default"])({
        testId: testId,
        submenuToggleLabel: submenuToggleLabel,
        onEnter: function onEnter() {
          return _this2.openMenu(true);
        },
        onLeave: function onLeave() {
          return _this2.openMenu(false);
        }
      }, otherProps), toggleElement && _react["default"].cloneElement(toggleElement, {
        'aria-haspopup': 'menu',
        'aria-expanded': this.state.isOpen
      }), this.state.isOpen && /*#__PURE__*/_react["default"].createElement(_DropdownContainer["default"], {
        anchorDimensionsAndPositon: this.state.anchorDimensionsAndPositon,
        position: this.props.position,
        width: width,
        className: dropdownContainerClassName,
        getRef: getContainerRef,
        dropdownAnchor: this.dropdownAnchor,
        onClose: this.props.onClose,
        openSubmenu: this.openSubmenu,
        submenu: true
      }, this.props.children)) : /*#__PURE__*/_react["default"].createElement("div", (0, _extends2["default"])({
        "data-test-id": testId,
        className: classNames,
        ref: function (_ref) {
          function ref(_x) {
            return _ref.apply(this, arguments);
          }

          ref.toString = function () {
            return _ref.toString();
          };

          return ref;
        }(function (ref) {
          if (!submenuToggleLabel) {
            _this2.dropdownAnchor = ref;
          }
        })
      }, otherProps), toggleElement && _react["default"].cloneElement(toggleElement, {
        'aria-haspopup': 'menu',
        'aria-expanded': this.state.isOpen
      }), this.state.isOpen && /*#__PURE__*/_react["default"].createElement(_DropdownContainer["default"], {
        className: dropdownContainerClassName,
        getRef: getContainerRef,
        submenu: false,
        width: width,
        testId: containerTestId,
        dropdownAnchor: this.dropdownAnchor,
        isAutoalignmentEnabled: isAutoalignmentEnabled,
        anchorDimensionsAndPositon: this.state.anchorDimensionsAndPositon,
        onClose: this.props.onClose,
        openSubmenu: this.openSubmenu,
        position: this.props.position
      }, this.props.children));
    }
  }]);
  return Dropdown;
}(_react.Component);

exports.Dropdown = Dropdown;
Dropdown.displayName = "Dropdown";
(0, _defineProperty2["default"])(Dropdown, "propTypes", {
  toggleElement: _propTypes["default"].element,
  submenuToggleLabel: _propTypes["default"].string,
  position: _propTypes["default"].oneOf(['top', 'right', 'left', 'bottom-left', 'bottom-right', 'top-right', 'top-left']).isRequired,
  isOpen: _propTypes["default"].bool.isRequired,
  onClose: _propTypes["default"].any,
  testId: _propTypes["default"].string,
  dropdownContainerClassName: _propTypes["default"].string,
  getContainerRef: _propTypes["default"].func,
  className: _propTypes["default"].string,
  children: _propTypes["default"].node.isRequired,
  isFullWidth: _propTypes["default"].bool,
  isAutoalignmentEnabled: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(Dropdown, "defaultProps", defaultProps);
var _default = Dropdown;
exports["default"] = _default;